#!/bin/bash
# Build a set of packages on a release in a container
#
# Used to test that packages in the archive are still buildable and do
# not fail to build (FTBFS).
#
# Build Exit Codes
# ---
# 124 if command times out
# 125 if timeout itself fails
# 126 if command is found but cannot be invoked
# 127 if command cannot be found
# 137 if command is sent the KILL(9) signal (128+9)
# otherwise the exit status of command is used
#
# Copyright 2018 Canonical Ltd.
# Joshua Powers <josh.powers@canonical.com>
set -eu

APT_CMD="DEBIAN_FRONTEND=noninteractive apt-get --assume-yes"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
LOG_DIR="logs/$TIMESTAMP"
NAME="build-$TIMESTAMP"


error() { echo "$@" 1>&2; }

usage() {
    cat <<EOF
Usage: ${0##*/} RELEASE SRC_PACKAGE[s]...
For a supported release, download and build package(s) from the
archive in a container.

Examples:
    * ${0##*/} bionic vim
    * ${0##*/} xenial ant qemu-kvm
    * ${0##*/} bionic exim4 iotop htop pep8 qemu uvtool
EOF
}

bad_usage() { usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }

cleanup() {
    if [ "$(lxc list "$NAME" --columns n --format=csv)" == "$NAME" ]; then
        lxc delete --force "$NAME"
    fi
}

check_networking(){
    exec_container sh -c '
        i=0
        while [ $i -lt 60 ]; do
            getent hosts archive.ubuntu.com && exit 0
            sleep 2
        done'

    ret=$?
    if [ "$ret" -ne 0 ]; then
        error "Waiting for network in container '$NAME' failed"
    fi
}

exec_container() {
    lxc exec "$NAME" -- "$@" >/dev/null 2>&1
    return $?
}

launch_container() {
    local release=$1; shift

    if [ "$(lxc list "$NAME" --columns n --format=csv)" == "$NAME" ]; then
        lxc delete --force "$NAME"
    fi

    lxc launch ubuntu-daily:"$release" "$NAME" ||
        error "Failed to start '$release' container named '$NAME'"

    check_networking "$NAME"

    echo 'Upgrading and installing ubuntu-dev-tools'
    exec_container sh -c "cloud-init status --wait"
    check_networking "$NAME"
    exec_container sh -c "sed -i '/^# deb-src/s/# //' /etc/apt/sources.list"
    exec_container sh -c "$APT_CMD update"
    exec_container sh -c "$APT_CMD full-upgrade --auto-remove --purge"
    exec_container sh -c "$APT_CMD install ubuntu-dev-tools"

    lxc snapshot "$NAME" base_image
}


build_package() {
    local package=$1; shift

    exec_container sh -c "$APT_CMD update"
    exec_container sh -c "$APT_CMD build-dep $package"

    local start="", end=""
    start=$(date +%s)

    timeout --foreground 15m lxc exec "$NAME" -- sh -c \
        "cd $package-*/ && dpkg-buildpackage -j4 -us -uc" \
        &> "$LOG_DIR/$package.log"

    local test_result=$?
    end=$(date +%s)
    local test_time=$((end-start))

    echo "$test_time" > "$LOG_DIR/$package.time"
    echo "$test_result" > "$LOG_DIR/$package.result"
    echo "$test_result took $test_time seconds"
}

main () {
    local short_opts="h"
    local long_opts="help"

    local getopt_out=""
    if getopt_out=$(getopt --name "${0##*/}" --options "${short_opts}" \
        --long "${long_opts}" -- "$@"); then
        eval set -- "${getopt_out}"
    else
        bad_usage
    fi

    local cur=""
    while [ $# -ne 0 ]; do
        cur="${1:-}"
        case "$cur" in
            -h|--help) usage; exit 0;;
            --) shift; break;;
        esac
        shift;
    done

    # Program starts here
    [ $# -gt 1 ] ||
        bad_usage "error: must provide a release and at least one package"

    local release=$1; shift
    if ! distro-info --supported | grep --quiet "$release"; then
        bad_usage "error: '$release' is not a supported release"
    fi

    trap cleanup EXIT

    echo "Launching container"
    launch_container "$release"

    mkdir -p "$LOG_DIR"
    echo "Starting builds"
    echo "---"

    for package in "$@"; do
        echo "$package"
        lxc restore "$NAME" base_image
        check_networking "$NAME"

        if ! exec_container sh -c "pull-lp-source $package $release"; then
            echo "-1 not found in $release, skipping";
            echo -1 > "$LOG_DIR/$package.result"
            continue;
        fi

        set +e
        build_package "$package"
        set -e
    done

    cleanup
}

main "$@"

# vi: ts=4 expandtab
